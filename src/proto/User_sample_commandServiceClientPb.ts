/**
 * @fileoverview gRPC-Web generated client stub for UserSample
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: user_sample_command.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as result_pb from './result_pb'; // proto import: "result.proto"
import * as user_sample_command_pb from './user_sample_command_pb'; // proto import: "user_sample_command.proto"


export class UserSampleCommandClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateSample = new grpcWeb.MethodDescriptor(
    '/UserSample.UserSampleCommand/CreateSample',
    grpcWeb.MethodType.UNARY,
    user_sample_command_pb.CreateSampleRequest,
    result_pb.CommonResult,
    (request: user_sample_command_pb.CreateSampleRequest) => {
      return request.serializeBinary();
    },
    result_pb.CommonResult.deserializeBinary
  );

  createSample(
    request: user_sample_command_pb.CreateSampleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<result_pb.CommonResult>;

  createSample(
    request: user_sample_command_pb.CreateSampleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: result_pb.CommonResult) => void): grpcWeb.ClientReadableStream<result_pb.CommonResult>;

  createSample(
    request: user_sample_command_pb.CreateSampleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: result_pb.CommonResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/UserSample.UserSampleCommand/CreateSample',
        request,
        metadata || {},
        this.methodDescriptorCreateSample,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/UserSample.UserSampleCommand/CreateSample',
    request,
    metadata || {},
    this.methodDescriptorCreateSample);
  }

  methodDescriptorUpdateSample = new grpcWeb.MethodDescriptor(
    '/UserSample.UserSampleCommand/UpdateSample',
    grpcWeb.MethodType.UNARY,
    user_sample_command_pb.UpdateSampleRequest,
    result_pb.CommonResult,
    (request: user_sample_command_pb.UpdateSampleRequest) => {
      return request.serializeBinary();
    },
    result_pb.CommonResult.deserializeBinary
  );

  updateSample(
    request: user_sample_command_pb.UpdateSampleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<result_pb.CommonResult>;

  updateSample(
    request: user_sample_command_pb.UpdateSampleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: result_pb.CommonResult) => void): grpcWeb.ClientReadableStream<result_pb.CommonResult>;

  updateSample(
    request: user_sample_command_pb.UpdateSampleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: result_pb.CommonResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/UserSample.UserSampleCommand/UpdateSample',
        request,
        metadata || {},
        this.methodDescriptorUpdateSample,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/UserSample.UserSampleCommand/UpdateSample',
    request,
    metadata || {},
    this.methodDescriptorUpdateSample);
  }

  methodDescriptorDeleteSample = new grpcWeb.MethodDescriptor(
    '/UserSample.UserSampleCommand/DeleteSample',
    grpcWeb.MethodType.UNARY,
    user_sample_command_pb.DeleteSampleRequest,
    result_pb.CommonResult,
    (request: user_sample_command_pb.DeleteSampleRequest) => {
      return request.serializeBinary();
    },
    result_pb.CommonResult.deserializeBinary
  );

  deleteSample(
    request: user_sample_command_pb.DeleteSampleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<result_pb.CommonResult>;

  deleteSample(
    request: user_sample_command_pb.DeleteSampleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: result_pb.CommonResult) => void): grpcWeb.ClientReadableStream<result_pb.CommonResult>;

  deleteSample(
    request: user_sample_command_pb.DeleteSampleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: result_pb.CommonResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/UserSample.UserSampleCommand/DeleteSample',
        request,
        metadata || {},
        this.methodDescriptorDeleteSample,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/UserSample.UserSampleCommand/DeleteSample',
    request,
    metadata || {},
    this.methodDescriptorDeleteSample);
  }

}

